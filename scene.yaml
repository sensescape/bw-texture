# Author: Geraldine Sarmiento


# Texture Shaders
# Brett Camper and Peter Richardson
# Tangram Blocks
# https://tangrams.github.io/blocks/
# Patricio Gonzalez Vivo

cameras:
    camera1:
        type: perspective

global:
    # default order for basemap features
    feature_order: function() { return feature.sort_rank; }
    feature_order_down_1: function() { return feature.sort_rank - 1; }
    building_extrude_height: |
        function () { return feature.height > 16 || $zoom >= 16; }

    # Sign up for a Mapzen API key to enjoy higher rate limits
    # https://mapzen.com/documentation/overview/#developer-accounts-and-api-keys
    sdk_api_key: '3eqm2_bfTNGZ85ar20fVyA'     # set this value to your Mapzen API key

    scale: 5.

    # Order functions
    order_add_9: function () { return (feature.sort_rank * 20 + 9); }
    order_add_8: function () { return (feature.sort_rank * 20 + 8); }
    order_add_7: function () { return (feature.sort_rank * 20 + 7); }
    order_add_6: function () { return (feature.sort_rank * 20 + 6); }
    order_add_5: function () { return (feature.sort_rank * 20 + 5); }
    order_add_4: function () { return (feature.sort_rank * 20 + 4); }
    order_add_3: function () { return (feature.sort_rank * 20 + 3); }
    order_add_2: function () { return (feature.sort_rank * 20 + 2); }
    order_add_1: function () { return (feature.sort_rank * 20 + 1); }
    feature_order: function() { return feature.sort_rank; }
    order: function () { return (feature.sort_rank * 20) || 0; }
    order_sub_1: function () { return (feature.sort_rank * 20 - 1); }
    order_sub_2: function () { return (feature.sort_rank * 20 - 2); }
    order_sub_3: function () { return (feature.sort_rank * 20 - 3); }
    order_sub_4: function () { return (feature.sort_rank * 20 - 4); }
    order_sub_5: function () { return (feature.sort_rank * 20 - 5); }
    order_sub_6: function () { return (feature.sort_rank * 20 - 6); }
    order_sub_7: function () { return (feature.sort_rank * 20 - 7); }
    order_sub_8: function () { return (feature.sort_rank * 20 - 8); }
    order_sub_9: function () { return (feature.sort_rank * 20 - 9); }

    pseudoRandomColor: |
        function() {
            return [
                0.5 * (parseInt(feature.id, 12) / 100 % 1),     // jshint ignore:line
                0.5 * (parseInt(feature.id, 12) / 10000 % 1),   // jshint ignore:line
                0.5 * (parseInt(feature.id, 12) / 1000000 % 1), // jshint ignore:line
                1
            ];
        }

    building_extrude_height: |                  # building extrude height logic
        function() { return feature.height || 70; }

textures:
    line-texture:
        url: images/stipple2-r.png

    palette:
        url: images/ramp.png

    red:
        width: 1
        height: 1
        data: [255, 0, 0, 255]

    blue:
        width: 1
        height: 1
        data: [0, 0, 255, 255]

    yellow:
        width: 1
        height: 1
        data: [255, 255, 0, 255]

    purple:
        width: 1
        height: 1
        data: [255, 0, 255, 255]


scene:
    background:
        color: [1.000,1.000,1.000]

sources:
    # mapzen:
    #     type: MVT
    #     # url:  https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
    #     url: https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt
    #     url_params:
    #         api_key: JJiaZE63TZObzPrmx0TQkw
    #     tile_size: 512
    #     max_zoom: 16

    mapzen:
        type: MVT
        url: https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
        url_params:
            api_key: global.sdk_api_key
        rasters: [normals-elevation]
        tile_size: 512
        max_zoom: 15
    normals-elevation:
        type: Raster
        url: https://tile.nextzen.org/tilezen/terrain/v1/512/normal/{z}/{x}/{y}.png
        url_params:
            api_key: global.sdk_api_key
        tile_size: 512
        max_zoom: 14

    xyz-osm:
        type: MVT
        url: https://xyz.api.here.com/tiles/osmbase/256/all/{z}/{x}/{y}.mvt

layers:
    earth:
        data: { source: mapzen, layer: earth }
        draw:
            polygons:
                # style: dots
                style: texture-terrain-earth
                # style: texture-zooms2
                # style: terrain
                order: global.feature_order
                color: [1.000,1.000,1.000]

    # water:
    #     data: { source: mapzen, layer: water }
    #     draw:
    #         polygons:
    #             style: water-dots
    #             # style: texture-zooms
    #             color: [0.000,0.000,0.000]
    #             order: global.feature_order

    water:
        data: { source: mapzen, layer: water }
        draw:
            polygons:
                style: water-dots
                order: global.feature_order
                color: [0.000,0.000,0.000]

        lakes:
            filter:
                all:
                    - kind: [ocean, lake, water, riverbank, reservoir, swimming_pool]
                # WARNING: any area filters here must match the area filters in the water-boundaries-not_ocean layer
                any:
                    # limit show smaller landuse areas to higher zooms
                    - { $zoom: { min: 1 },  area: { min: 40000000000 } }
                    - { $zoom: { min: 2 },  area: { min: 20000000000 } }
                    # some weird natural earth scale set transition
                    - { $zoom: { min: 3 },  area: { min: 80000000000 } }
                    - { $zoom: { min: 4 },  area: { min: 5000000000 } }
                    - { $zoom: { min: 5 },  area: { min: 700000000 } }
                    - { $zoom: { min: 6 },  area: { min: 500000000 } }
                    - { $zoom: { min: 7 },  area: { min: 160000000 } }
                    - { $zoom: { min: 8 },  area: { min: 40000000 } }
                    - { $zoom: { min: 9 },  area: { min: 10000000 } }
                    - { $zoom: { min: 10 }, area: { min: 8000000 } }
                    - { $zoom: { min: 11 }, area: { min: 2000000 } }
                    - { $zoom: { min: 12 }, area: { min: 200000 } }
                    - { $zoom: { min: 13 }, area: { min: 100000 } }
                    - { $zoom: { min: 14 }, area: { min: 2000 } }
                    - { $zoom: { min: 15 } }
            draw:
                polygons:
                    style: water-dots

        other_areas:
            filter: { not: { kind: [ocean, lake, water, reservoir] }, $zoom: { min: 10 }, area: { min: 100 } }
            draw:
                polygons:
                    style: water-dots

        playas:
            filter: { kind: playa, $zoom: { min: 4 } }
            draw:
                polygons:
                    style: earth-dots2
                    order: global.feature_order
                    color: [0.500,0.500,0.500]

        boundaries:
            filter: { boundary: true, kind: ocean }
            # don't animate early, save the fan, save the planet!
            early:
                filter: { $zoom: { max: 16 } }
                draw:
                    lines:
                        style: coastline-glow
                        order: global.feature_order
                        width: [[4,0px],[11,2.5px],[14,6px],[16,10px]]
                        color: [0.600,0.600,0.600]
                        join: round
            animated:
                filter: { $zoom: { min: 16 } }
                draw:
                    lines:
                        style: water-boundaries-animated
                        order: global.feature_order
                        width: [[16,21px],[18,30px],[20,36]]
                        color: [0.600,0.600,0.600]
                        join: round

        boundaries-not_ocean:
            filter:
                all:
                    - boundary: true
                    - not: { kind: [ocean, playa] }
                    - $zoom: { min: 8 }
                # WARNING: any area filters here must match the area filters in the lakes layer
                any:
                    # limit show smaller landuse areas to higher zooms
                    - { $zoom: { min: 1 },  area: { min: 40000000000 } }
                    - { $zoom: { min: 2 },  area: { min: 20000000000 } }
                    # some weird natural earth scale set transition
                    - { $zoom: { min: 3 },  area: { min: 80000000000 } }
                    - { $zoom: { min: 4 },  area: { min: 5000000000 } }
                    - { $zoom: { min: 5 },  area: { min: 700000000 } }
                    - { $zoom: { min: 6 },  area: { min: 500000000 } }
                    - { $zoom: { min: 7 },  area: { min: 160000000 } }
                    - { $zoom: { min: 8 },  area: { min: 40000000 } }
                    - { $zoom: { min: 9 },  area: { min: 10000000 } }
                    - { $zoom: { min: 10 }, area: { min: 8000000 } }
                    - { $zoom: { min: 11 }, area: { min: 2000000 } }
                    - { $zoom: { min: 12 }, area: { min: 200000 } }
                    - { $zoom: { min: 13 }, area: { min: 100000 } }
                    - { $zoom: { min: 14 }, area: { min: 2000 } }
                    - { $zoom: { min: 15 } }
            draw:
                lines:
                    order: global.feature_order
                    color: [1.000,1.000,1.000]
                    width: [[8,0px],[13,1px],[15,1.25px],[20,3px]]
                    join: round

            boundaries-not_ocean-riverbank:
                # river boundaries like the thames in london, la seine in paris
                filter: { kind: riverbank }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: [[8,0px],[13,1px],[15,1.25px],[20,8px]]

    roads:
        data: { source: mapzen, layer: roads }
        draw:
            lines:
                width: 1px
                order: global.feature_order

        early:
            filter: { $zoom: { max: 15 } }
            draw:
                lines:
                    outline:
                        order: global.feature_order

        bridges-tunnels:
            filter: { any: [is_bridge: true, is_tunnel: true] }
            draw:
                lines:
                    # cap: butt
                    outline:
                        # except bridges and tunnels, their outlines should also self-sort
                        order: global.feature_order

        natural_earth_highways:
            filter: { $zoom: { min: 5, max: 8 } }
            draw:
                lines:
                    cap: round
                    join: round
                    color: [1.000,1.000,1.000]
                    width: 1px
            major_road:
                filter: { kind: major_road }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: 1px
            minor_road:
                filter: { kind: minor_road }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: 1px
            ferry:
                filter: { kind: ferry }
                draw:
                    lines:
                        visible: false
                        color: red
                        width: 1px

        highway:
            filter:
                kind: highway
                $zoom: { min: 8 }
            highway-z8:
                filter:
                    $zoom: { min: 8, max: 11 }
                draw:
                    lines:
                        style: roads-glow
                        color: [1.000,1.000,1.000]
                        width: [[8,4px],[11,9px]]

            highway-z11:
                filter:
                    $zoom: { min: 11 }
                draw:
                    lines:
                        order: global.order
                        color: [1.000,1.000,1.000]
                        width: [[8,0px],[9,0.25px],[10,1px],[12,1px],[13,2px],[14,3px],[15,5px],[16,5px],[17,9px],[18,16px],[19,12px]]
                        outline:
                            color: [0.000,0.000,0.000]
                            width: [[8,0.5px],[9,1px],[12,1.25px],[15,1.5px],[16,1.5px],[17,0px]]
                    highway-dashed:
                        order: global.order_sub_1
                        color: [0.000,0.000,0.000]
                        width: [[8,0px],[16,8px],[17,15px],[18,22px],[19,23px]]
                    highway-glow:
                        order: global.order_sub_6
                        color: [1.000,1.000,1.000]
                        width: [[11,8px],[13,12px],[16,30px],[17,40px],[18,50px],[19,80px]]
                    # highway-casing:
                    #     order: global.order

                highway-link:
                    filter: { is_link: true } # on- and off-ramps, etc
                    draw:
                        lines:
                            order: global.order_add_1
                            width: [[8,0px],[9,0px],[11,0.25px],[12,0.25px],[13,1px],[14,1.5px],[15,2px],[17,3px],[18,9px],[19,12px],[20,20px]]
                            outline:
                                color: [1.000,1.000,1.000]
                                width: [[8,0px],[9,0.5px],[15,1px],[18,1.5px]]
                        highway-dashed:
                            visible: false
                        # highway-casing:
                        #     visible: false
                        highway-glow:
                            visible: false

                    highway-link-early:
                        filter: { $zoom: { min: 13, max: 15 } }
                        draw:
                            lines:
                                order: 352
                            highway-dashed:
                                visible: false
                        highway-link-early-z17-18:
                            filter: { $zoom: [17, 18]}
                            draw:
                                lines:
                                    visible: false

                highway-tunnel:
                    filter: { is_tunnel: true, $zoom: { min: 13 } }
                    draw:
                        lines:
                            color: [0.000,0.000,0.000]
                            outline:
                                color: [1.000,1.000,1.000]
                        highway-dashed:
                            visible: true
                            color: [0.000,0.000,0.000]
                        highway-glow:
                            visible: true
                            color: [1.000,1.000,1.000]
                        # highway-casing:
                        #     color: [0.073,0.435,0.908]
                        #     visible: true
                    highway-tunnel-link:
                        filter:
                            is_link: true
                        draw:
                            highway-dashed:
                                visible: false
                            # highway-casing:
                            #     visible: false
                            highway-glow:
                                visible: false

            # Show 0 width roads one zoom before they have width, so they can scale up instead of popping in
            # highway-z17:
            #     filter:
            #         $zoom: { min: 16 }
            #     draw:
            #         highway-casing:
            #             visible: true
            #             order: global.order_sub_2
            #             color: [0.541,0.969,0.949]
            #             width: [[8,0px],[16,10px],[17,18px],[18,34px],[19,45px]]

            # tunnel:
            #     filter: {is_tunnel: true, $zoom: {min: 13} }
            #     draw:
            #         lines:
            #             color: [1.000,1.000,1.000]
            #             outline:
            #                 color: [0.700,0.700,0.700]

            highway_bridge:
                filter: {is_bridge: true}
                draw:
                    lines:
                        cap: round
                        outline:
                            cap: butt

        # ##### ROADS BLACK START

        # major_road:
        #     filter: { kind: major_road, $zoom: { min: 8 } }
        #     # default style
        #     draw:
        #         lines:
        #             color: [0.000,0.000,0.000]
        #             width: [[13, 1px], [14, 1px]]
        #     trunk_primary:
        #         filter: { kind_detail: [trunk, primary] }
        #         draw:
        #             lines:
        #                 color: [0.000,0.000,0.000]
        #                 width: [[8, 0.6px], [9, 0.75px], [10, 1.5px], [13, 2.5px], [14, 4.5px], [15, 5.5px], [16, 7.0px], [19, 14m]]
        #         early:
        #             filter: { $zoom: { max: 16 } }
        #             draw:
        #                 lines:
        #                     order: 352
        #                     outline:
        #                         order: function() { return feature.sort_rank + 2; }
        #             primary:
        #                 filter: { kind: [primary] }
        #                 draw:
        #                     lines:
        #                         outline:
        #                             order: function() { return feature.sort_rank + 1; }
        #         routes:
        #             filter: { ref: true }
        #             draw:
        #                 lines:
        #                     color: [0.000,0.000,0.000]
        #                     width: [[8, 1.0px], [9, 1.5px], [10, 2.0px], [14, 3.5px], [15, 4.5px], [16, 6.0px], [17, 12m]]
        #             early:
        #                 filter: { $zoom: { max: 16 } }
        #                 draw:
        #                     lines:
        #                         order: function() { return feature.sort_rank + 2; }
        #                         outline:
        #                             order: 353
        #             tunnel:
        #                 filter: { is_tunnel: true, $zoom: { min: 13 } }
        #                 draw:
        #                     lines:
        #                         color: [0.500,0.500,0.500]
        #     link:
        #         filter: { is_link: true } # on- and off-ramps, etc
        #         draw:
        #             lines:
        #                 color: [0.000,0.000,0.000]
        #                 width: 0.5px
        #     tunnel:
        #         filter: { is_tunnel: true, $zoom: { min: 13 } }
        #         draw:
        #             lines:
        #                 color: [0.500,0.500,0.500]
        #     secondary:
        #         filter: { kind_detail: secondary }
        #         draw:
        #             lines:
        #                 color: [0.000,0.000,0.000]
        #                 width: [[11, 1.0px], [12, 1.0px], [13, 2.0px], [14, 3.5px], [15, 4.5px], [16, 7.0px], [19, 16m]]
        #         early:
        #             filter: { $zoom: { max: 16 } }
        #             draw:
        #                 lines:
        #                     order: 352
        #         routes:
        #             filter: { ref: true, $zoom: { min: 12 } }
        #             draw:
        #                 lines:
        #                     color: [0.000,0.000,0.000]
        #                     width: 0.5px
        #             early:
        #                 filter: { $zoom: { max: 15 } }
        #                 draw:
        #                     lines:
        #                         order: function() { return feature.sort_rank + 2; }
        #                         outline:
        #                             order: 353
        #             tunnel:
        #                 filter: {is_tunnel: true, $zoom: { min: 13 } }
        #                 draw:
        #                     lines:
        #                         color: [0.000,0.000,0.000]
        #     tertiary:
        #         filter: { kind_detail: [tertiary, tertiary_link] }
        #         draw:
        #             lines:
        #                 color: [0.000,0.000,0.000]
        #                 width: [[11, 0.5px], [12, .75px], [14, 2.5px], [15, 4.0px], [16, 6.5px], [17, 7.5px], [19, 14m]]
        #         early:
        #             filter: { $zoom: { max: 15 } }
        #             draw:
        #                 lines:
        #                     order: 352
        #         routes:
        #             filter: { ref: true, $zoom: { min: 12 } }
        #             draw:
        #                 lines:
        #                     color: [0.000,0.000,0.000]
        #                     width: 0.5px
        #             early:
        #                 filter: { $zoom: { max: 15 } }
        #                 draw:
        #                     lines:
        #                         order: function() { return feature.sort_rank + 3; }
        #                         outline:
        #                             order: 353
        #             tunnel:
        #                 filter: { is_tunnel: true, $zoom: { min: 13 } }
        #                 draw:
        #                     lines:
        #                         color: [0.000,0.000,0.000]
        #         link:
        #             filter: { is_link: true } # on- and off-ramps, etc
        #             draw:
        #                 lines:
        #                     color: [0.000,0.000,0.000]
        #                     width: 0.5px

        # minor_road:
        #     filter: { kind: minor_road, not: { kind_detail: service }, $zoom: { min: 8 } }
        #     draw:
        #         lines:
        #             color: [0.000,0.000,0.000]
        #             width: [[11, 0.5px], [12, 0.75px], [13, 1.0px], [14, 1.2px], [15, 2.5px], [16, 8m]]
        #     early:
        #         filter: { $zoom: { max: 16 } }
        #         draw:
        #             lines:
        #                 order: 350
        #     round:
        #         filter: { $zoom: { min: 17 } }
        #         draw:
        #             lines:
        #                 cap: round
        #                 join: round

        #     tunnel:
        #         filter: {is_tunnel: true, $zoom: { min: 13 } }
        #         draw:
        #             lines:
        #                 color: [0.500,0.500,0.500]
        #     minor_road_bridge:
        #         filter: { is_bridge: true }
        #         draw:
        #             lines:
        #                 cap: round

        # path:
        #     filter:
        #         all:
        #             - $zoom: { min: 16 }
        #             - kind: [path, portage_way]
        #         not:
        #             - kind_detail: [steps, track, pier]
        #     draw:
        #         lines:
        #             # style: dashed-lines
        #             color: [0.000,0.000,0.000]
        #             width: [[14, 0.5px], [15, 1.5px], [17, 3m]]

        # #####
        # ##### ROADS BLACK END

        ##### ROADS WHITE START
        #####

        major_road:
            filter: { kind: major_road, $zoom: { min: 8 } }
            # default style
            draw:
                lines:
                    color: [1.000,1.000,1.000]
                    width: [[13, 1px], [14, 1px]]
            trunk_primary:
                filter: { kind_detail: [trunk, primary] }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: [[8, 0.6px], [9, 0.75px], [10, 1.5px], [13, 2.5px], [14, 4.5px], [15, 5.5px], [16, 7.0px], [19, 14m]]
                early:
                    filter: { $zoom: { max: 16 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: function() { return feature.sort_rank + 2; }
                    primary:
                        filter: { kind: [primary] }
                        draw:
                            lines:
                                outline:
                                    order: function() { return feature.sort_rank + 1; }
                routes:
                    filter: { ref: true }
                    draw:
                        lines:
                            color: [1.000,1.000,1.000]
                            width: [[8, 1.0px], [9, 1.5px], [10, 2.0px], [14, 3.5px], [15, 4.5px], [16, 6.0px], [17, 12m]]
                    early:
                        filter: { $zoom: { max: 16 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 2; }
                                outline:
                                    order: 353
                    tunnel:
                        filter: { is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: [1.000,1.000,1.000]
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: 0.5px
            tunnel:
                filter: { is_tunnel: true, $zoom: { min: 13 } }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
            secondary:
                filter: { kind_detail: secondary }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: [[11, 1.0px], [12, 1.0px], [13, 2.0px], [14, 3.5px], [15, 4.5px], [16, 7.0px], [19, 16m]]
                early:
                    filter: { $zoom: { max: 16 } }
                    draw:
                        lines:
                            order: 352
                routes:
                    filter: { ref: true, $zoom: { min: 12 } }
                    draw:
                        lines:
                            color: [1.000,1.000,1.000]
                            width: 0.5px
                    early:
                        filter: { $zoom: { max: 15 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 2; }
                                outline:
                                    order: 353
                    tunnel:
                        filter: {is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: [1.000,1.000,1.000]
            tertiary:
                filter: { kind_detail: [tertiary, tertiary_link] }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: [[11, 0.5px], [12, .75px], [14, 2.5px], [15, 4.0px], [16, 6.5px], [17, 7.5px], [19, 14m]]
                early:
                    filter: { $zoom: { max: 15 } }
                    draw:
                        lines:
                            order: 352
                routes:
                    filter: { ref: true, $zoom: { min: 12 } }
                    draw:
                        lines:
                            color: [1.000,1.000,1.000]
                            width: 0.5px
                    early:
                        filter: { $zoom: { max: 15 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 3; }
                                outline:
                                    order: 353
                    tunnel:
                        filter: { is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: [1.000,1.000,1.000]
                link:
                    filter: { is_link: true } # on- and off-ramps, etc
                    draw:
                        lines:
                            color: [1.000,1.000,1.000]
                            width: 0.5px

        minor_road:
            filter: { kind: minor_road, not: { kind_detail: service }, $zoom: { min: 8 } }
            draw:
                lines:
                    color: [1.000,1.000,1.000]
                    width: [[11, 0.5px], [12, 0.75px], [13, 1.0px], [14, 1.2px], [15, 2.5px], [16, 8m]]
            early:
                filter: { $zoom: { max: 16 } }
                draw:
                    lines:
                        order: 350
            round:
                filter: { $zoom: { min: 17 } }
                draw:
                    lines:
                        cap: round
                        join: round

            tunnel:
                filter: {is_tunnel: true, $zoom: { min: 13 } }
                draw:
                    lines:
                        color: [0.000,0.000,0.000]
            minor_road_bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        cap: round

        path:
            filter:
                all:
                    - $zoom: { min: 16 }
                    - kind: [path, portage_way]
                not:
                    - kind_detail: [steps, track, pier]
            draw:
                lines:
                    # style: dashed-lines
                    color: [1.000,1.000,1.000]
                    width: [[14, 0.5px], [15, 1.5px], [17, 3m]]


        ##### ROADS WHITE
        ##### END

        airport-lines:
            filter: { kind: aeroway, kind_detail: [runway,taxiway] }
            draw:
                lines:
                    order: global.feature_order
                    color: [0.800,0.800,0.800]
                    width: 2px
            taxiway:
                filter: { kind_detail: taxiway }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: [[12,0px],[15,3px],[20,8px]]
                        outline:
                            width: 0px
            runway:
                filter: { kind_detail: runway }
                draw:
                    lines:
                        color: [1.000,1.000,1.000]
                        width: [[9,0px],[11,1px],[13,5px],[15,30px],[20,100m]]
                        outline:
                            style: runway-glow
                            color: [0.200,0.200,0.200]
                            width: [[9,2px],[11,3px],[12,2px],[20,12px]]
                runway-detail:
                    filter: { $zoom: { min: 12 } }
                    draw:
                        runway-dots:
                            color: [0.000,0.000,0.000]
                            width: [[12,2px],[15,8px],[20,24px]]

    landuse:
        data: { source: mapzen }
        draw:
            polygons:
                order: global.feature_order
                visible: false
        # tier1:
        national_park:
            filter:
                all:
                    - kind: [national_park, battlefield, protected_area]
                any:
                    - not: { operator: [ "United States Forest Service" ] }
                    - protect_class: ['2','3','5']
            draw:
                polygons:
                    style: texture-terrain-park
                    color: [1.000,1.000,1.000]
                    visible: true
            us_national_park:
                # yosemite national park, death valley national park, grand canyon national park
                filter:
                    any:
                        - operator: [ "United States National Park Service" ]
                        - protect_class: ['2','3','5']
                draw:
                    polygons:
                        style: texture-terrain-park
                        color: [0.300,0.300,0.300]
                        visible: true


        conservation:
            filter:
                $zoom: { min: 4 }
                kind: [protected_area, nature_reserve, national_park]
                not: { protect_class: ['2','3','5']}
            draw:
                polygons:
                    style: texture-terrain-conservation
                    color: [0.300,0.300,0.300]
                    visible: true

        national_forest_level_6:
            filter:
                all:
                    - kind: forest
                any:
                    - protect_class: ['6']
                    - operator: ['United States Forest Service']
            draw:
                polygons:
                    # style: forest
                    # style: texture-terrain-park
                    style: dash-terrain-landuse
                    color: [0.000,0.000,0.000]
                    visible: true

        forest-landcover:
            filter: { kind: [forest, natural_forest, wood, natural_wood, natural_park], $zoom: { min: 10 }, not: { operator: "United States Forest Service" } }
            draw:
                polygons:
                    # style: forest
                    style: texture-terrain-forest
                    color: [0.300,0.300,0.300]
                    visible: true

        parks-and-national-forests-not-national-park:
            filter:
                all:
                    - $zoom: { min: 4 }
                    - kind: [park, national_park]
                any:
                    - not: { operator: [ "United States National Park Service", "United States Forest Service" ] }
                    - not: { protect_class: ['2','3','5','6'] }
            # default for national forests and more?
            draw:
                polygons:
                    # style: terrain-dots
                    # style: texture-terrain-park
                    style: texture-terrain-zooms
                    color: [0.300,0.300,0.300]
                    visible: true
            national_park:
                #filter: function() { return feature.name && (feature.name.indexOf('National Park') > -1); }
                filter:
                    all:
                        - kind: texture-terrain-park
                        - not: [ protect_class: ['2','3','5','6'], operator: [ "United States National Park Service"] ]
                draw:
                    polygons:
                        visible: true

        golf_course:
            filter:
                kind: golf_course
            draw:
                polygons:
                    # style: landuse-test
                    # style: terrain-dots
                    # style: texture-terrain-earth
                    style: texture-zooms-multi
                    color: [0.000,0.000,0.000]
                    visible: true

        hospital:
                filter:
                    kind: hospital
                draw:
                    polygons:
                        style: glow-dots
                        color: [0.900,0.900,0.900]
                        visible: true

        university:
            filter:
                all:
                    - kind: [university, college]
                    - $zoom: { min: 14 }
            draw:
                polygons:
                    style: gradient1
                    color: [0.900,0.900,0.900]
                    visible: true

    buildings:
        data: { source: mapzen, layer: buildings }
        filter:
            not: { location: underground }
        draw:
            polygons:
                visible: false
                order: global.order
                color: [0.800,0.800,0.800]
            lines:
                visible: false
                order: global.order_add_1
                color: [0.000,0.000,0.000]

        footprints:
            filter:
                any:
                    - { $zoom: [13], scale_rank: [1,2,3] }
                    - { $zoom: [14], scale_rank: [1,2,3] }
                    - { $zoom: [15], height: { min: 100 } }
                    - { $zoom: [15], area: { min: 700 } }
                    - { $zoom: [15], volume: { min: 100000 } }
                    - { $zoom: [16], area: { min: 100 } }
                    - { $zoom: [16], volume: { min: 50000 } }
                    - { $zoom: { min: 17 }, area: true }
            draw:
                polygons:
                    visible: true
                    style: building-dots
                # lines:
                #     visible: true
                #     width: 1px

            extrude:
                filter:
                    all:
                        - $zoom: { min: 15 }
                        - height: { min: 200 }
                        - not:
                            - layer: [-1, -2, -3, -4, -5]
                draw:
                    polygons:
                        visible: true
                        color: [0.500,0.500,0.500]
                        extrude: global.building_extrude_height
                    lines:
                        visible: true
                        color: [1.000,1.000,1.000]
                        width: [[12, .75px], [18, 1.0px]]
                        extrude: global.building_extrude_height

        in_hospital:
            filter:
                landuse_kind: hospital
            draw:
                polygons:
                    visible: true
                    style: polygons-transparent
                    color: [1.000,1.000,1.000,0.5]
                lines:
                    visible: true
                    width: 1px

        in_university:
            filter:
                landuse_kind: [university, college]
            draw:
                polygons:
                    visible: true
                    style: polygons-transparent
                    color: [1.000,1.000,1.000,0.5]
                lines:
                    visible: true
                    width: 1px

styles:
    water-boundaries-animated:
        base: lines
        mix: [lines-coast]
        shaders:
            defines:
                COAST_WAVES_ANIMATED: true

    lines-coast:
        base: lines
        animated: true
        texcoords: true
        blend: add
        shaders:
            defines:
                COAST_WAVES_AMOUNT: 5.
                COAST_WAVES_SPEED: 0.1
                COAST_WAVES_ANIMATED: true
            blocks:
                color: |
                    float pct = 0.0;
                    // glow
                    pct = smoothstep(0.,2.,1.-v_texcoord.x);
                    // waves
                    #ifdef COAST_WAVES_ANIMATED
                    pct += (1.-fract(v_texcoord.x*COAST_WAVES_AMOUNT+(fract(u_time*COAST_WAVES_SPEED))))*pct;
                    #else
                    pct += (1.-fract(v_texcoord.x*COAST_WAVES_AMOUNT))*pct;
                    #endif

                    color *= pct;

    coastline-glow:
        base: lines
        mix: [lines-glow]
        shaders:
            defines:
                GLOW_WIDTH: .5
                GLOW_BRIGHTNESS: .5

    no-texture:
        base: polygons

    polygons-transparent:
        base: polygons
        blend: overlay

    terrain:
        base: polygons
        lighting: false
        # raster: normal
        raster: custom
        shaders:
            uniforms:
                u_envmap: images/refill-spheremap-light.jpg
                u_contrast: 1.
                u_zoom_scale: 3.5
                u_brightness_base: 0.95
                u_brightness_scaler: 0.75
            blocks:
                global: |
                    // Simplified view-independent environment map
                    vec4 applyEnvmap (in sampler2D _tex, in vec3 _normal, in float scale) {
                        _normal.z *= scale;
                        return texture2D(_tex, .5*(normalize(_normal).xy + 1.));
                    }
                normal: |
                    // get the normal from the normal map, to apply terrain shading
                    normal = normalize(sampleRaster(0).xyz * 2. - 1.);
                color: |
                    // turn terrain exaggeration up/down
                    // fade out spheremap normals with a function
                    float scale1 = 20./(u_map_position.z + 1.0) + 1.5;
                    color *= applyEnvmap(u_envmap, normal, 1./scale1);

                    // apply contrast and brightness
                    float m = u_zoom_scale * (u_map_position.z + 0.4) * exp(u_map_position.z * -.29);
                    m = clamp(m, 0., 1.5);

                    float contrast = m;
                    contrast = 1.;
                    float brightness = u_brightness_base - m * u_brightness_scaler;

                    // color.rgb = ((color.rgb - 0.5) * max(contrast, 0.)) + 0.5;
                    // color.rgb += brightness;

    gradient1:
        base: polygons
        shaders:
            blocks:
                filter: |
                    color.rgb = mix(vec3(1.000), vec3(0.050,0.050,0.050), gl_FragCoord.x / u_resolution.x); // 50% mix of white and green

    gradient2:
        base: polygons
        shaders:
            blocks:
                filter: |
                    color.rgb = vec3(abs(sin(gl_FragCoord.x / u_resolution.x)+0.28), abs(sin(gl_FragCoord.x / u_resolution.x)+0.28), abs(sin(gl_FragCoord.x / u_resolution.x)+0.28));

    dots:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/dots2.jpg
                u_scale: 4

    earth-dots2:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/earth-dots2.jpg
                u_scale: 1

    diagonal-dots:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/diagonal-dot.jpg
                u_scale: 1

    building-dots:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/building-dots2.jpg
                u_scale: 1

    water-dots:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/water-dots1.jpg
                u_scale: 1

    conservation:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/water-brush3.jpg
                u_scale: 1

    forest:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/forest1.jpg
                u_scale: 1

    forest2:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/forest2.jpg
                u_scale: 1

    park:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/park2.jpg
                u_scale: 1

    parks2:
        base: polygons
        mix: texture
        shaders:
            uniforms:
                u_customtexture: images/park4.jpg
                u_scale: 1

    texture-terrain-conservation:
        base: polygons
        raster: custom
        shaders:
            uniforms:
                # two textures to cross-fade between
                u_textures:
                    # - images/water-brush4.jpg
                    # - images/water2.jpg
                    - images/water-brush1.jpg
                    - images/water-brush3.jpg
                u_zoom_fade: [12.5, 13] # zooms to start/stop cross-fade
                u_scale: 1. # number of times to repeat texture in a tile
                # u_light: [-0.5, 0.5, -0.5] # lights are flipped to match sat hillshade
                # u_light: [0.000, -0.320, -0.725] # lights are flipped to match sat hillshade
                u_light: [-0.375, 0.000, -0.530] # lights are flipped to match sat hillshade
                u_ambient: 0.5
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .75;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }
                color: |
                    // float dz = clamp((u_map_position.z - u_zoom_fade[0]) / (u_zoom_fade[1] - u_zoom_fade[0]), 0., 1.);
                    // color.rgb = TileTexture(u_textures[0],u_scale).rgb;

                    // simple directional light with Lambert shading
                    vec3 terrain = normalize(sampleRaster(0).xyz *2. - 1.4); // terrain surface normal
                    float diffuse = clamp(dot(terrain, normalize(-u_light)), 0., 1.);
                    float dz = clamp((u_ambient) + (diffuse), 0., 1.);

                    // brightness at which terrain texture fade starts
                    float edge = 0.85;

                    // controls terrain texture fade transition
                    float feather =
                        TANGRAM_EPSILON; // hard edge
                        // 0.025; // in between
                        // 0.05; // soft edge

                    color.rgb = mix(
                        TileTexture(u_textures[0],u_scale).rgb,
                        TileTexture(u_textures[1],u_scale).rgb,
                        // 1.-step(dz, u_edge) // hard edge
                        smoothstep(edge - feather, edge + feather, dz)
                    );

    texture-terrain-park:
        base: polygons
        raster: custom
        shaders:
            uniforms:
                # two textures to cross-fade between
                u_textures:
                    - images/park-dots1.jpg
                    - images/park-dots3.jpg
                u_zoom_fade: [12.5, 13] # zooms to start/stop cross-fade
                u_scale: 1. # number of times to repeat texture in a tile
                # u_light: [-0.5, 0.5, -0.5] # lights are flipped to match sat hillshade
                # u_light: [0.000, -0.320, -0.725] # lights are flipped to match sat hillshade
                u_light: [-0.375, 0.000, -0.530] # lights are flipped to match sat hillshade
                u_ambient: 0.5
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .75;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }
                color: |
                    // float dz = clamp((u_map_position.z - u_zoom_fade[0]) / (u_zoom_fade[1] - u_zoom_fade[0]), 0., 1.);
                    // color.rgb = TileTexture(u_textures[0],u_scale).rgb;

                    // simple directional light with Lambert shading
                    vec3 terrain = normalize(sampleRaster(0).xyz *2. - 1.4); // terrain surface normal
                    float diffuse = clamp(dot(terrain, normalize(-u_light)), 0., 1.);
                    float dz = clamp((u_ambient) + (diffuse), 0., 1.);

                    // brightness at which terrain texture fade starts
                    float edge = 0.85;

                    // controls terrain texture fade transition
                    float feather =
                        TANGRAM_EPSILON; // hard edge
                        // 0.025; // in between
                        //0.05; // soft edge

                    color.rgb = mix(
                        TileTexture(u_textures[0],u_scale).rgb,
                        TileTexture(u_textures[1],u_scale).rgb,
                        // 1.-step(dz, u_edge) // hard edge
                        smoothstep(edge - feather, edge + feather, dz)
                    );

    texture-terrain-forest:
        base: polygons
        raster: custom
        shaders:
            uniforms:
                # two textures to cross-fade between
                u_textures:
                    - images/forest2.jpg
                    - images/forest1.jpg
                u_zoom_fade: [12.5, 13] # zooms to start/stop cross-fade
                u_scale: 1. # number of times to repeat texture in a tile
                # u_light: [-0.5, 0.5, -0.5] # lights are flipped to match sat hillshade
                # u_light: [0.000, -0.320, -0.725] # lights are flipped to match sat hillshade
                u_light: [-0.375, 0.000, -0.530] # lights are flipped to match sat hillshade
                u_ambient: 0.5
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .75;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }
                color: |
                    // float dz = clamp((u_map_position.z - u_zoom_fade[0]) / (u_zoom_fade[1] - u_zoom_fade[0]), 0., 1.);
                    // color.rgb = TileTexture(u_textures[0],u_scale).rgb;

                    // simple directional light with Lambert shading
                    vec3 terrain = normalize(sampleRaster(0).xyz *2. - 1.4); // terrain surface normal
                    float diffuse = clamp(dot(terrain, normalize(-u_light)), 0., 1.);
                    float dz = clamp((u_ambient) + (diffuse), 0., 1.);

                    // brightness at which terrain texture fade starts
                    float edge = 0.85;

                    // controls terrain texture fade transition
                    float feather =
                        TANGRAM_EPSILON; // hard edge
                        // 0.025; // in between
                        // 0.05; // soft edge

                    color.rgb = mix(
                        TileTexture(u_textures[0],u_scale).rgb,
                        TileTexture(u_textures[1],u_scale).rgb,
                        // 1.-step(dz, u_edge) // hard edge
                        smoothstep(edge - feather, edge + feather, dz)
                    );

    texture-terrain-earth:
        base: polygons
        raster: custom
        shaders:
            uniforms:
                # two textures to cross-fade between
                u_textures:
                    - images/earth-dots2.jpg
                    - images/earth-dots5.jpg
                    # - images/earth-dots5.jpg
                    # - images/earth-dots6.jpg
                    # - images/earth-dots8.jpg
                    # - images/earth-dots9.jpg
                u_zoom_fade: [12.5, 13] # zooms to start/stop cross-fade
                u_scale: 1. # number of times to repeat texture in a tile
                # u_light: [-0.5, 0.5, -0.5] # lights are flipped to match sat hillshade
                # u_light: [0.000, -0.320, -0.725] # lights are flipped to match sat hillshade
                u_light: [-0.375, 0.000, -0.530] # lights are flipped to match sat hillshade
                u_ambient: 0.5
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .75;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }
                color: |
                    // float dz = clamp((u_map_position.z - u_zoom_fade[0]) / (u_zoom_fade[1] - u_zoom_fade[0]), 0., 1.);
                    // color.rgb = TileTexture(u_textures[0],u_scale).rgb;

                    // simple directional light with Lambert shading
                    vec3 terrain = normalize(sampleRaster(0).xyz *2. - 1.4); // terrain surface normal
                    float diffuse = clamp(dot(terrain, normalize(-u_light)), 0., 1.);
                    float dz = clamp((u_ambient) + (diffuse), 0., 1.);

                    // brightness at which terrain texture fade starts
                    float edge = 0.85;

                    // controls terrain texture fade transition
                    float feather =
                        TANGRAM_EPSILON; // hard edge
                        // 0.025; // in between
                        // 0.05; // soft edge

                    color.rgb = mix(
                        TileTexture(u_textures[0],u_scale).rgb,
                        TileTexture(u_textures[1],u_scale).rgb,
                        // 1.-step(dz, u_edge) // hard edge
                        smoothstep(edge - feather, edge + feather, dz)
                    );

    texture-zooms-multi:
        base: polygons
        shaders:
            defines:
                # MUST match number of entries in u_zoom_stops below
                NUM_TEXTURE_STOPS: 3
            uniforms:
                u_zoom_stops: [12, 14, 17] # zooms to start/stop cross-fade
                u_textures:
                    - images/dots2.jpg
                    - images/earth-dots4.jpg
                    - images/park-dots1.jpg
                    - images/park.jpg
                    # - red
                    # - blue
                    # - yellow
                    # - purple
                u_zoom_fade_range: 0.5 # how quickly the zoom cross-fade happens
                u_scale: 1. # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .75;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }

                    vec3 blendTextureSet(float z) {
                        const int numTextureStops = int(NUM_TEXTURE_STOPS);
                        vec3 iTex = TileTexture(u_textures[numTextureStops], u_scale).rgb;
                        vec3 jTex = TileTexture(u_textures[numTextureStops], u_scale).rgb;
                        float textureFade = 1.;

                        for (int a=0; a < numTextureStops; a++) {
                            if (z < u_zoom_stops[a]) {
                                iTex = TileTexture(u_textures[a], u_scale).rgb;
                                jTex = TileTexture(u_textures[a+1], u_scale).rgb;
                                textureFade = 1. - clamp(u_zoom_stops[a] - z, 0., u_zoom_fade_range) / u_zoom_fade_range;
                                break;
                            }
                        }
                        return mix(iTex, jTex, textureFade);
                    }
                color: |
                    color.rgb = blendTextureSet(u_map_position.z);

    texture-terrain-zooms:
        base: polygons
        raster: custom
        shaders:
            uniforms:
                # textures to fade between
                u_texturesA:
                    - images/dots2.jpg
                    - images/park-dots1.jpg
                    - images/park.jpg
                u_texturesB:
                    - images/diagonal-dot2.jpg
                    - images/park-dots3.jpg
                    - images/forest1.jpg
                u_zoom_fade: [14, 17] # zooms to start/stop cross-fade
                u_zoom_fade_range: 0.7 # how quickly the zoom cross-fade happens

                u_scale: 1. # number of times to repeat texture in a tile
                u_light: [-0.5, 0.5, -0.5] # lights are flipped to match sat hillshade
                u_ambient: 0.5
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .75;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        // linear transition
                        // texf = fract(u_map_position.z);
                        // use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }

                color: |
                    // simple directional light with Lambert shading
                    vec3 terrain = normalize(sampleRaster(0).xyz *2. - 1.4); // terrain surface normal
                    float diffuse = clamp(dot(terrain, normalize(-u_light)), 0., 1.);
                    float maskBlend = clamp((u_ambient) + (diffuse), 0., 1.);

                    // brightness at which terrain texture fade starts
                    float edge = 0.85;

                    // controls terrain texture fade transition
                    float feather =
                        TANGRAM_EPSILON; // hard edge
                        // 0.025; // in between
                        // 0.05; // soft edge

                    vec3 textureASample, textureBSample;
                    float textureFade;

                    if (u_map_position.z < u_zoom_fade[0]) {
                        const int i = 0, j = 1;

                        textureFade = 1. - clamp(u_zoom_fade[i] - u_map_position.z, 0., u_zoom_fade_range) / u_zoom_fade_range;

                        textureASample = mix(
                            TileTexture(u_texturesA[i], u_scale).rgb,
                            TileTexture(u_texturesA[j], u_scale).rgb,
                            textureFade);

                        textureBSample = mix(
                            TileTexture(u_texturesB[i], u_scale).rgb,
                            TileTexture(u_texturesB[j], u_scale).rgb,
                            textureFade);
                    }
                    else if (u_map_position.z < u_zoom_fade[1]) {
                        const int i = 1, j = 2;

                        textureFade = 1. - clamp(u_zoom_fade[i] - u_map_position.z, 0., u_zoom_fade_range) / u_zoom_fade_range;

                        textureASample = mix(
                            TileTexture(u_texturesA[i], u_scale).rgb,
                            TileTexture(u_texturesA[j], u_scale).rgb,
                            textureFade);

                        textureBSample = mix(
                            TileTexture(u_texturesB[i], u_scale).rgb,
                            TileTexture(u_texturesB[j], u_scale).rgb,
                            textureFade);
                    }
                    else {
                        const int i = 2;

                        textureASample = TileTexture(u_texturesA[i], u_scale).rgb;
                        textureBSample = TileTexture(u_texturesB[i], u_scale).rgb;
                    }

                    color.rgb = mix(
                        textureASample,
                        textureBSample,
                        smoothstep(edge - feather, edge + feather, maskBlend)
                    );

    textured-lines:
        base: lines
        lighting: false
        material:
            diffuse:
                texture: line-texture
                mapping: uv
        shaders:
            uniforms:
                u_tex: line-texture
            blocks:
                color: |
                    // have to do a fract on the texcoord to get it to repeat over the length of the line
                    color = texture2D(u_tex, fract(vec2(v_texcoord.x, v_texcoord.y))); // straight texture
                    // color *= texture2D(u_tex, fract(vec2(v_texcoord.x, v_texcoord.y))); // tinted
                    //color *= 1. - texture2D(u_tex, fract(vec2(v_texcoord.x, v_texcoord.y))); // inverted & tinted
                    //color.a = texture2D(u_tex, fract(vec2(v_texcoord.x, v_texcoord.y))).a; // use texture's alpha

    texture:
        base: polygons
        shaders:
            uniforms:
                u_customtexture: images/uv-coords.png
                u_scale: 1. # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .75;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }
                color: |
                    color.rgb = TileTexture(u_customtexture,u_scale).rgb;

    texture-zooms:
        base: polygons
        shaders:
            uniforms:
                # two textures to cross-fade between
                u_textures:
                    - images/water.jpg
                    # - https://raw.githubusercontent.com/sensescape/bw-texture/master/images/water-brush4.jpg
                    - images/dots2.jpg
                u_zoom_fade: [12.5, 13] # zooms to start/stop cross-fade
                u_scale: 1. # number of times to repeat texture in a tile
            blocks:
                position: |
                    // make tile worldspace coordinates available to the global block
                    v_pos = modelPosition();
                global: |
                    varying vec4 v_pos;
                    vec4 TileTexture(sampler2D tex, float scale) {
                        // CONTROLS
                        // how smooth should the transition be?
                        // 0 = snapping, 1 = continuous smoothstep crossfade
                        float smoothness = .75;
                        vec2 IN = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z);
                        vec2 OUT = v_pos.xy * scale * exp2(floor(u_map_position.z)-u_tile_origin.z + 1.);
                        vec4 intex = texture2D(tex,fract(IN));
                        vec4 outtex = texture2D(tex,fract(OUT));
                        float texf;
                        //// linear transition
                        // texf = fract(u_map_position.z);
                        //// use smoothstep instead
                        float tx = (1. - smoothness) * .5;
                        texf = smoothstep(tx, 1.-tx, fract(u_map_position.z));
                        return mix(intex, outtex, texf);
                    }
                color: |
                    float dz = clamp((u_map_position.z - u_zoom_fade[0]) / (u_zoom_fade[1] - u_zoom_fade[0]), 0., 1.);
                    // color.rgb = TileTexture(u_textures[0],u_scale).rgb;
                    color.rgb = mix(
                        TileTexture(u_textures[0],u_scale).rgb,
                        TileTexture(u_textures[1],u_scale).rgb,
                        dz);

    texture-zooms2:
        mix: texture-zooms
        shaders:
            uniforms:
                u_textures:
                    - images/park4.jpg
                    - images/forest1.jpg
                u_zoom_fade: [12.25, 13.25]
                u_scale: 1.

    terrain-dots:
        base: polygons
        mix: [elevation-ramp, terrain-pattern]

    terrain-pattern:
        base: polygons
        mix: [elevation-normal, functions-zoom, polygons-dots]
        shaders:
            defines:
                ZOOM_START: 0.
                ZOOM_END: 13.
                DOTS_DIR: vec3(-0.500,0.500,-0.500)
                # DOTS_DIR: vec3(0.600,-0.950,0.520)
                DOTS_COLOR: vec3(0.)
                DOTS_BACKGROUND_COLOR: vec3(1.)
                DOTS_SCALE: 55.
                DOTS_SIZE: mix(shade*3.,shade*1.,zoom())
                # DOTS_SCALE: 35.
                # DOTS_SIZE: mix(shade*10.,shade*2.,zoom())
            blocks:
                # normal: |
                #     float shade = dot((sampleRaster(int(NORMAL_TEXTURE_INDEX)).rgb-.5)*2., DOTS_DIR);
                #     shade = shade*shade*shade;
                normal: |
                    float shade = dot(normal, DOTS_DIR);
                    // modify brightness and contrast
                    shade = shade*shade*shade * -2. + .25;
                    // reset normal to prevent standard terrain shading mixing with dots
                    normal = vec3(0,0,1);

    elevation-normal:
        raster: custom
        shaders:
            defines:
                NORMAL_TEXTURE_INDEX: 0
            blocks:
                normal: |
                    vec4 normal_elv_raster = sampleRaster(int(NORMAL_TEXTURE_INDEX));
                    normal = (normal_elv_raster.rgb-.5)*2.;

    elevation-ramp:
        shaders:
            uniforms:
                u_ramp: palette
            blocks:
                color: |
                    color = texture2D(u_ramp, vec2((1.-normal_elv_raster.a),.5));
        raster: custom

    polygons-dots:
        base: polygons
        mix:
            - space-tile
            - tiling-brick
            - shapes-circle
        shaders:
            blocks:
                global: |
                    float TileDots(float scale, float size) {

                        // controls
                        float DOT_SIZE = size * .1; // bigger value = smaller dots
                        float SPEED = 2.; // bigger value = faster transition

                        vec2 tc = getTileCoords() * size * pow(2., floor(u_map_position.z) - abs(u_tile_origin.z));
                        vec2 IN = brick(tc, 2.);
                        float A = circleDF(vec2(.5) - IN) * DOT_SIZE;
                        vec2 OUT = brick(tc, 4.);
                        float B = circleDF(vec2(.5) - OUT) * DOT_SIZE;

                        // keep B dots big as they fade in, to maintain density
                        B *= pow(fract(u_map_position.z)*.95, SPEED);

                        float d = mix(A, B, pow(fract(u_map_position.z), SPEED));
                        return aastep(scale, d);
                    }

                color: |
                    color.rgb = mix(DOTS_COLOR, DOTS_BACKGROUND_COLOR, TileDots(DOTS_SIZE, DOTS_SCALE));

    runway-glow:
        base: lines
        mix: [lines-glow]
        shaders:
            defines:
                GLOW_WIDTH: 0.80
                GLOW_BRIGHTNESS: .5

    runway-dots:
        base: lines
        mix: [lines-dots-glow]
        animated: true
        shaders:
            defines:
                DOTS_ANIMATE: color.a *=abs(sin(v_texcoord.y+u_time))*1.0
            blocks:
                filter: |
                    #ifdef DOTS_ANIMATE
                    DOTS_ANIMATE;
                    #endif

    highway-dashed:
        base: lines
        dash: [1,1]
        dash_background_color: [1.000,1.000,1.000]
        shaders:
            blocks:
                position: |
                    v_texcoord.y *= 11.;

    highway-glow:
        base: lines
        mix: [lines-glow]
        shaders:
            defines:
                GLOW_WIDTH: 0.45
                GLOW_BRIGHTNESS: .25

    roads-glow:
        base: lines
        mix: [functions-zoom, lines-glow]
        shaders:
            defines:
                ZOOM_START: 5.
                ZOOM_END: 6.
                GLOW_WIDTH: mix(1.,.45,zoom())
                GLOW_BRIGHTNESS: zoom()*.22

    dash-terrain-landuse:
        base: polygons
        mix: [functions-zoom, elevation-dash]
        shaders:
            defines:
                ZOOM_START: 14.
                ZOOM_END: 18.
                ZOOM_IN: .0
                ZOOM_OUT: 1.

                DASH_COLOR: vec3(1.000,1.000,1.000)
                DASH_BACKGROUND_COLOR: vec3(0.000,0.000,0.000)
                DASH_SCALE: 21.
                DASH_TYPE: fill
                DASH_TILE_STYLE: brick
                DASH_DIR: vec3(-0.600,-0.420,0.560)
                NORMAL_TEXTURE_INDEX: 0
                DASH_MIN_SIZE: .02
                DASH_MAX_SIZE: 1.
                DASH_SIZE: shade

    elevation-dash:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Perfect for the `landuse` layer on your elevation maps, the `elevation-dash` modules use the color of the layer to draw a dash pattern that changes width based on the surface of the terrain.
        base: polygons
        mix: [ polygons-diagonal-dash, terrain]
        # lighting: false
        # raster: normal
        raster: custom
        shaders:
            defines:
                DASH_COLOR: color.rgb*.5
                DASH_BACKGROUND_COLOR: color.rgb
                DASH_SCALE: 10.
                DASH_TYPE: fill
                DASH_TILE_STYLE: brick
                DASH_DIR: vec3(-0.600,-0.420,0.560)
                NORMAL_TEXTURE_INDEX: 0
                DASH_MIN_SIZE: .7
                DASH_MAX_SIZE: 1.
                DASH_SIZE: shade
            blocks:
                normal: |
                    float shade = dot((sampleRaster(int(NORMAL_TEXTURE_INDEX)).rgb-.5)*2., DASH_DIR);
                    shade = mix(DASH_MIN_SIZE, DASH_MAX_SIZE, (shade*shade*shade)*5.);

    polygons-diagonal-dash:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Apply a diagonal dash pattern to the polygon style. To learn more about patterns check [this chapter from the Book of Shaders](https://thebookofshaders.com/09/)
        ui:
            shaders:
                defines:
                    DASH_SCALE:
                        type: number
                        label: Scale
                        range:
                            min: 1.
                            max: 1000.
                            step: 1.
                    DASH_SIZE:
                        type: number
                        label: Alpha
                        range:
                            min: 0.
                            max: 1.
                            step: 0.01
                    STRIPES_ALPHA:
                        type: number
                        label: Alpha
                        range:
                            min: 0.
                            max: 1.
                            step: 0.01
                    DASH_COLOR:
                        type: color
                        label: Color
                    DASH_BACKGROUND_COLOR:
                        type: color
                        label: 'Background color'
                    DASH_TYPE:
                        type: dropdownArray
                        label: Type
                        values: ['fill', 'stroke']
                    DASH_TILE_STYLE:
                        type: dropdownArray
                        label: 'Tile type'
                        values: ['tile', 'brick']
        base: polygons
        mix: [block, space-tile, tiling-brick, tiling-tile, shapes-type]
        shaders:
            defines:
                DASH_COLOR: color.rgb*.5
                DASH_BACKGROUND_COLOR: color.rgb
                DASH_SCALE: 10.
                DASH_SIZE: 0.9
                DASH_TYPE: fill
                DASH_TILE_STYLE: tile
            blocks:
                global: |
                    float dashDF(vec2 st) {
                        return min(cos((st.x-st.y)*PI),-cos((st.x+st.y+.5)*PI*.6666)*5.);
                    }
                color: |
                    color.rgb = mix(DASH_BACKGROUND_COLOR,
                                    DASH_COLOR,
                                    DASH_TYPE( DASH_SIZE, dashDF(DASH_TILE_STYLE(getTileCoords()*DASH_SCALE,3.))) );

    glow-dots:
        mix: [polygons-dots2]
        shaders:
            defines:
                DOTS_COLOR: vec3(0.000,0.000,0.000)
                DOTS_GLOW_COLOR: vec3(1.000,1.000,1.000)
                DOTS_GLOW_SIZE: 2.
                DOTS_GLOW_AMOUNT: 0.25
                DOTS_SCALE: 16.
                DOTS_SIZE: 0.21
                DOTS_BACKGROUND_COLOR: color.rgb
                DOTS_TYPE: fill
                DOTS_TILE_STYLE: brick
            blocks:
                color: |
                    float sdf = circleDF(vec2(0.5)-DOTS_TILE_STYLE(getTileCoords()*DOTS_SCALE,2.));

                    color.rgb = mix(DOTS_BACKGROUND_COLOR,
                                    DOTS_COLOR,
                                    DOTS_TYPE( DOTS_SIZE, sdf));
                    color.rgb += (DOTS_GLOW_COLOR*(1.-sdf*2.))*DOTS_GLOW_AMOUNT;

    polygons-dots2:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |  
                Apply dot patterns to a polygon. To learn more about patterns check [this chapter from the Book of Shaders](https://thebookofshaders.com/09/)
        ui:
            shaders:
                defines:
                    DOTS_SCALE:
                        type: number
                        label: Scale
                        range: 
                            min: 1.
                            max: 1000.
                            step: 1.
                    DOTS_SIZE:
                        type: number
                        label: Size
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
                    STROKE:
                        type: number
                        label: Stroke
                        default_value: 0.15
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
                    DOTS_TYPE: 
                        type: dropdownArray
                        label: Type
                        values: ['fill', 'stroke']
                    DOTS_TILE_STYLE: 
                        type: dropdownArray
                        label: 'Tile type'
                        values: ['tile', 'brick']
                    DOTS_COLOR: 
                        type: color
                        label: Color
                    DOTS_BACKGROUND_COLOR: 
                        type: color
                        label: 'Background color'

        base: polygons
        mix: [space-tile2, tiling-brick2, tiling-tile2, shapes-circle2]
        shaders:
            defines:
                DOTS_COLOR: color.rgb*.5
                DOTS_BACKGROUND_COLOR: color.rgb
                DOTS_SCALE: 10.
                DOTS_SIZE: 0.41
                DOTS_TYPE: fill
                DOTS_TILE_STYLE: brick
            blocks:
                color: |
                    color.rgb = mix(DOTS_BACKGROUND_COLOR, 
                                    DOTS_COLOR, 
                                    DOTS_TYPE( DOTS_SIZE, circleDF(vec2(0.5)-DOTS_TILE_STYLE(getTileCoords()*DOTS_SCALE,2.))) );

    lines-glow:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |  
                Add an exciting glow effect to your
        ui:
            shaders:
                defines:
                    GLOW_WIDTH:
                        type: number
                        label: Solid width
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
                    GLOW_BRIGHTNESS:
                        type: number
                        label: Glow Brightness
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
        base: lines
        mix: [block, functions-aastep]
        texcoords: true
        blend: add
        shaders:
            defines:
                GLOW_WIDTH: 0.4
                GLOW_BRIGHTNESS: .25
            blocks:
                color: |
                    vec4 glow_tmp_color = color;
                    color = glow_tmp_color*(aastep(GLOW_WIDTH,1.-v_texcoord.x)*aastep(GLOW_WIDTH,v_texcoord.x));
                    color += glow_tmp_color*(sin(v_texcoord.x*PI)*GLOW_BRIGHTNESS);

    lines-dots-glow:
        base: lines
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Apply a dot pattern to a line with some glow
        ui:
            shaders:
                defines:
                    DOTS_SIZE:
                        type: number
                        label: Size
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
                    DOTS_GLOW:
                        type: number
                        label: Glow amount
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
                    DOTS_SCALE:
                        type: number
                        label: Scale
                        range: 
                            min: 0.
                            max: 2.
                            step: 0.1
        texcoords: true
        blend: overlay
        animated: true
        shaders:
            defines:
                DOTS_SCALE: 2.
                DOTS_SIZE: 0.15
                DOTS_GLOW: .5
            blocks:
                color: |
                    vec2 st = (fract(v_texcoord.xy)-.5)*DOTS_SCALE;
                    float df = dot(st,st);
                    color.a = 1.-step(DOTS_SIZE, df);
                    color.a += smoothstep(1.,0.,df)*(DOTS_GLOW);

    space-tile:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Get the position on the tile
        test:
            tile:
                defines:
                    v_pos: 'v_texcoord'
                blocks:
                    color: |
                        vec2 st = getTileCoords();
                        color.rg += fract(st*3.);
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    #ifndef v_pos
                    varying vec3 v_pos;
                    #endif

                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return fract(v_pos.xy);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;

    space-tile2:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Get the position on the tile
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    varying vec3 v_pos;
                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return fract(v_pos.xy);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;

    tiling-brick:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Repeats a coordinate space (`vec2 st`) in diferent brick-like tiles N times (`float zoom`). For more information about tilling patterns read [this chapter of The Book of Shaders](https://thebookofshaders.com/09/)
            examples:
                nursery:
                    url: https://tangrams.github.io/tangram-sandbox/styles/nursery.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/nursery.png
                    lines: 99
                patterns:
                    url: https://tangrams.github.io/tangram-sandbox/styles/patterns.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/patterns.png
                    lines: 130
        test:
            brick: { blocks: { color: "    color.rg += brick(v_texcoord.xy,5.);" } }
        shaders:
            blocks:
                global: |
                    vec2 brick (vec2 st, float zoom) {
                        st *= zoom;
                        // Here is where the offset is happening
                        st.x += step(1., mod(st.y,2.0)) * 0.5;
                        return fract(st);
                    }

    tiling-brick2:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Repeats a coordinate space (`vec2 st`) in diferent brick-like tiles N times (`float zoom`). For more information about tilling patterns read [this chapter of The Book of Shaders](https://thebookofshaders.com/09/)
            examples:
                nursery:
                    url: https://tangrams.github.io/tangram-sandbox/styles/nursery.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/nursery.png
                    lines: 99 
                patterns:
                    url: https://tangrams.github.io/tangram-sandbox/styles/patterns.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/patterns.png
                    lines: 130
        shaders:
            blocks:
                global: |
                    vec2 brick (vec2 st, float zoom) {
                        st *= zoom;
                        // Here is where the offset is happening
                        st.x += step(1., mod(st.y,2.0)) * 0.5;
                        return fract(st);
                    }

    tiling-tile:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Repeats a coordinate space (`vec2 st`) in diferent brick-like tiles N times (`float zoom`). For more information about tilling patterns read [this chapter of The Book of Shaders](https://thebookofshaders.com/09/)
        test:
            tile: { blocks: { color: "    color.rg += tile(v_texcoord.xy,5.);" } }
        shaders:
            blocks:
                global: |
                    // Repeats a coordinate space (st) in diferent tiles
                    // ================================
                    vec2 tile (vec2 st, float zoom) {
                        st *= zoom;
                        return fract(st);
                    }

    tiling-tile2:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Repeats a coordinate space (`vec2 st`) in diferent brick-like tiles N times (`float zoom`). For more information about tilling patterns read [this chapter of The Book of Shaders](https://thebookofshaders.com/09/)
        shaders:
            blocks:
                global: |
                    // Repeats a coordinate space (st) in diferent tiles
                    // ================================
                    vec2 tile (vec2 st, float zoom) {
                        st *= zoom;
                        return fract(st);
                    }

    shapes-type:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                This block provides to functions `fill` and `stroke`. Each one transform a SDF to a fill shape or a stroke shape (border). The stroke width can be control with the define `STROKE`.
                To learn more about how to make shapes on shaders go to From check [this chapter about shapes from the Book of Shaders](https://thebookofshaders.com/07/)
        mix: [functions-aastep]
        shaders:
            defines:
                STROKE: 0.15
            blocks:
                global: |
                    float fill (in float size, in float x) {
                        return 1.-aastep(size, x);
                    }

                    float stroke (in float size, in float x) {
                        return aastep(size, x+STROKE*.5) - aastep(size, x-STROKE*.5);
                    }

    functions-zoom:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                when you mix this block to another block you can use the functions `zoom()` or `zoomEase()`. Both will help you to interpolate any values between the zooms `ZOOM_START` and `ZOOM_END`.
                By default `zoom()` and `zoomEase()` will return a `float `number between 0 and 1. But you can change it to interpolate any thing! Like `floats`, `vec2`, `vec3`, `vec4` and even other functions! For that you just need to change de `defines`: `ZOOM_IN`, and `ZOOM_OUT` to what ever you want to interpolate.
                `zoom()` use the cuadratic interpolation of `smoothstep()` but you can use `zoomEase()` to specify what type of **easing interpolation** you prefere. Just change the default `linear` function for any [easing functions describe here](#functions-easing) in the `ZOOM_FNC` define. Ex: `ZOOM_FNC: quadraticInOut`
        mix: [functions-easing]
        shaders:
            defines:
                ZOOM_START: 14.
                ZOOM_END: 20.
                ZOOM_MAX: max(ZOOM_START, ZOOM_END)
                ZOOM_FNC: linear
                ZOOM_IN: 0.0
                ZOOM_OUT: 1.0
            blocks:
                global: |
                    float zoom() {
                        return mix( ZOOM_IN,
                                    ZOOM_OUT,
                                    clamp( smoothstep(  ZOOM_START/ZOOM_MAX,
                                                        ZOOM_END/ZOOM_MAX,
                                                        max(u_map_position.z/ZOOM_MAX, 0.)), 0., 1.) );
                    }
                    float zoomEase() {
                        return mix( ZOOM_IN,
                                    ZOOM_OUT,
                                    ZOOM_FNC( (u_map_position.z-ZOOM_START)/(ZOOM_END-ZOOM_START) ) );
                    }
    functions-easing:
        doc:
            author:
                name: StackGL
                url: http://stack.gl/
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Easing functions originally develop by Robert Penner's and transformed to GLSL by [StackGL](http://stack.gl/) in this repo: <https://github.com/stackgl/glsl-easings>
        shaders:
            defines:
                PI: 3.1415926535897932384626433832795
                HALF_PI: 1.5707963267948966192313216916398
            blocks:
                global: |
                    float linear (in float t) {
                        return t;
                    }
                    float exponentialIn (in float t) {
                        return t == 0.0 ? t : pow(2.0, 10.0 * (t - 1.0));
                    }
                    float exponentialOut (in float t) {
                        return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);
                    }
                    float exponentialInOut (in float t) {
                        return t == 0.0 || t == 1.0
                        ? t
                        : t < 0.5
                            ? +0.5 * pow(2.0, (20.0 * t) - 10.0)
                            : -0.5 * pow(2.0, 10.0 - (t * 20.0)) + 1.0;
                    }
                    float sineIn (in float t) {
                        return sin((t - 1.0) * HALF_PI) + 1.0;
                    }
                    float sineOut (in float t) {
                        return sin(t * HALF_PI);
                    }
                    float sineInOut (in float t) {
                        return -0.5 * (cos(PI * t) - 1.0);
                    }
                    float qinticIn (in float t) {
                        return pow(t, 5.0);
                    }
                    float qinticOut (in float t) {
                        return 1.0 - (pow(t - 1.0, 5.0));
                    }
                    float qinticInOut (in float t) {
                        return t < 0.5
                            ? +16.0 * pow(t, 5.0)
                            : -0.5 * pow(2.0 * t - 2.0, 5.0) + 1.0;
                    }
                    float quarticIn (in float t) {
                        return pow(t, 4.0);
                    }
                    float quarticOut (in float t) {
                        return pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;
                    }
                    float quarticInOut (in float t) {
                        return t < 0.5
                            ? +8.0 * pow(t, 4.0)
                            : -8.0 * pow(t - 1.0, 4.0) + 1.0;
                    }
                    float quadraticInOut (in float t) {
                        float p = 2.0 * t * t;
                        return t < 0.5 ? p : -p + (4.0 * t) - 1.0;
                    }
                    float quadraticIn (in float t) {
                        return t * t;
                    }
                    float quadraticOut (in float t) {
                        return -t * (t - 2.0);
                    }
                    float cubicIn (in float t) {
                        return t * t * t;
                    }
                    float cubicOut (in float t) {
                        float f = t - 1.0;
                        return f * f * f + 1.0;
                    }
                    float cubicInOut (in float t) {
                        return t < 0.5
                            ? 4.0 * t * t * t
                            : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;
                    }
                    float elasticIn (in float t) {
                        return sin(13.0 * t * HALF_PI) * pow(2.0, 10.0 * (t - 1.0));
                    }
                    float elasticOut (in float t) {
                        return sin(-13.0 * (t + 1.0) * HALF_PI) * pow(2.0, -10.0 * t) + 1.0;
                    }
                    float elasticInOut (in float t) {
                        return t < 0.5
                            ? 0.5 * sin(+13.0 * HALF_PI * 2.0 * t) * pow(2.0, 10.0 * (2.0 * t - 1.0))
                            : 0.5 * sin(-13.0 * HALF_PI * ((2.0 * t - 1.0) + 1.0)) * pow(2.0, -10.0 * (2.0 * t - 1.0)) + 1.0;
                    }
                    float circularIn (in float t) {
                        return 1.0 - sqrt(1.0 - t * t);
                    }
                    float circularOut (in float t) {
                        return sqrt((2.0 - t) * t);
                    }
                    float circularInOut (in float t) {
                        return t < 0.5
                            ? 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t))
                            : 0.5 * (sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);
                    }
                    float bounceOut (in float t) {
                        const float a = 4.0 / 11.0;
                        const float b = 8.0 / 11.0;
                        const float c = 9.0 / 10.0;
                        const float ca = 4356.0 / 361.0;
                        const float cb = 35442.0 / 1805.0;
                        const float cc = 16061.0 / 1805.0;
                        float t2 = t * t;
                        return t < a
                        ? 7.5625 * t2
                        : t < b
                            ? 9.075 * t2 - 9.9 * t + 3.4
                            : t < c
                                ? ca * t2 - cb * t + cc
                                : 10.8 * t * t - 20.52 * t + 10.72;
                    }
                    float bounceIn (in float t) {
                        return 1.0 - bounceOut(1.0 - t);
                    }
                    float bounceInOut (in float t) {
                        return t < 0.5
                        ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))
                        : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;
                    }
                    float backIn (in float t) {
                        return pow(t, 3.0) - t * sin(t * PI);
                    }
                    float backOut (in float t) {
                        float f = 1.0 - t;
                        return 1.0 - (pow(f, 3.0) - f * sin(f * PI));
                    }
                    float backInOut (in float t) {
                        float f = t < 0.5
                        ? 2.0 * t
                        : 1.0 - (2.0 * t - 1.0);
                        float g = pow(f, 3.0) - f * sin(f * PI);
                        return t < 0.5
                        ? 0.5 * g
                        : 0.5 * (1.0 - g) + 0.5;
                    }

    functions-aastep:
        doc:
            author:
                name: Matt DesLauriers
                twitter: mattdesl
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                AnitAliased ```step()``` function implemented by [Matt DesLauriers](https://twitter.com/mattdesl) in this module <https://github.com/stackgl/glsl-aastep>
        shaders:
            extensions: OES_standard_derivatives
            blocks:
                global: |
                    // AntiAliased Step function
                    //=============================
                    float aastep(float threshold, float value) {
                        #ifdef TANGRAM_FRAGMENT_SHADER
                            #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                                float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;
                                return smoothstep(threshold-afwidth, threshold+afwidth, value);
                            #else
                                return step(threshold, value);
                            #endif
                        #else
                            return step(threshold, value);
                        #endif
                    }

    shapes-circle:
        mix: functions-aastep
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    // get distance field of a Circle
                    // ================================
                    float circleDF (vec2 st) {
                        return dot(st,st);
                    }
                    //
                    // Draw a circle in the middle of the ST space
                    // ================================
                    float circle (vec2 st, float radius) {
                        return 1.-aastep(radius, circleDF(st-vec2(0.5))*PI);
                    }

    shapes-circle2:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |  
                Collection of functions to draw circles. To learn more about how to make shapes on shaders go to From check [this chapter about shapes from the Book of Shaders](https://thebookofshaders.com/07/)
            examples:
                lego:
                    url: https://tangrams.github.io/tangram-sandbox/styles/lego.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/lego.png
                    lines: 109-110
                patterns:
                    url: https://tangrams.github.io/tangram-sandbox/styles/patterns.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/patterns.png
                    lines: 146
                nursery:
                    url: https://tangrams.github.io/tangram-sandbox/styles/nursery.yaml
                    img: https://tangrams.github.io/tangram-sandbox/styles/nursery.png
                    lines: 146
        mix: [shapes-type]
        shaders:
            blocks:
                global: |
                    // get distance field of a Circle
                    // ================================
                    float circleDF (vec2 st) {
                        return dot(st,st)*3.03;
                    }
                    //
                    // Draw a circle in the middle of the ST space
                    // ================================
                    float circle (vec2 st, float radius) {
                        return fill(radius, circleDF(st-vec2(0.5)));
                    }

                    //
                    // Draw a circle in the middle of the ST space
                    // ================================
                    float circleBorder (vec2 st, float radius) {
                        return stroke(radius, circleDF(st-vec2(0.5)));
                    }

    block:
        shaders:
            defines:
                ADD: '+'
                SUBTRACT: '-'
                MULTIPLY: '*'

                PI: 3.1415926535897932384626433832795
                TWO_PI: 6.2831853071795864769252867665590
                HALF_PI: 1.5707963267948966192313216916398
                QUATER_PI: .785398163

                EPSILON: 0.0000001

                deg2rad(d): (((d)*3.1415926535897932384626433832795)/180.0)
                rad2deg(d): (((d)*180.0)/3.1415926535897932384626433832795)
